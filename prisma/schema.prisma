// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  addresses Address[]
  orders    Order[]
  wishlist  WishlistItem[]
  reviews   Review[]
  accounts  Account[]
  sessions  Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  products Product[]

  @@map("categories")
}

model Collection {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  isActive    Boolean   @default(true)
  isFeatured  Boolean   @default(false)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]

  @@map("collections")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String?
  price         Float
  originalPrice Float?
  sku           String   @unique
  slug          String   @unique
  material      String
  purity        String?
  weight        Float
  dimensions    Json?
  gemstones     Json[]   @default([])
  certification Json[]   @default([])
  occasion      String[]
  style         String
  quantity      Int      @default(0)
  lowStockThreshold Int @default(5)
  isActive      Boolean  @default(true)
  isFeatured    Boolean  @default(false)
  tags          String[]
  seoTitle      String?
  seoDescription String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  categoryId   String
  category     Category @relation(fields: [categoryId], references: [id])
  collectionId String?
  collection   Collection? @relation(fields: [collectionId], references: [id])
  
  images       ProductImage[]
  variants     ProductVariant[]
  cartItems    CartItem[]
  orderItems   OrderItem[]
  wishlistItems WishlistItem[]
  reviews      Review[]

  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  alt       String
  isPrimary Boolean @default(false)
  order     Int     @default(0)
  width     Int?
  height    Int?
  
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id        String @id @default(cuid())
  name      String
  value     String
  price     Float?
  sku       String?
  inventory Int?
  image     String?
  
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  cartItems CartItem[]
  orderItems OrderItem[]

  @@map("product_variants")
}

model Address {
  id         String      @id @default(cuid())
  type       AddressType @default(SHIPPING)
  isDefault  Boolean     @default(false)
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String      @default("India")
  phone      String?
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  billingOrders  Order[] @relation("BillingAddress")
  shippingOrders Order[] @relation("ShippingAddress")

  @@map("addresses")
}

model Cart {
  id        String   @id @default(cuid())
  sessionId String?  @unique
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id       String @id @default(cuid())
  quantity Int    @default(1)
  
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@unique([cartId, productId, variantId])
  @@map("cart_items")
}

model Order {
  id                String        @id @default(cuid())
  orderNumber       String        @unique
  subtotal          Float
  tax               Float         @default(0)
  shipping          Float         @default(0)
  discount          Float         @default(0)
  total             Float
  currency          String        @default("INR")
  status            OrderStatus   @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  paymentMethod     String?
  paymentIntentId   String?
  trackingNumber    String?
  estimatedDelivery DateTime?
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  userId            String
  user              User    @relation(fields: [userId], references: [id])
  billingAddressId  String
  billingAddress    Address @relation("BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddressId String
  shippingAddress   Address @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  
  items OrderItem[]

  @@map("orders")
}

model OrderItem {
  id       String @id @default(cuid())
  quantity Int
  price    Float
  
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model WishlistItem {
  id      String   @id @default(cuid())
  addedAt DateTime @default(now())
  
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  title     String?
  comment   String?
  images    String[] @default([])
  verified  Boolean  @default(false)
  helpful   Int      @default(0)
  reported  Boolean  @default(false)
  createdAt DateTime @default(now())
  
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

enum AddressType {
  BILLING
  SHIPPING
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

model Admin {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String   // Hashed password
  email     String?  @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model SiteImage {
  id          String   @id @default(cuid())
  section     String   // e.g., "hero", "featured-collections", "brand-story", "product-showcase", "testimonials"
  imageKey    String   // e.g., "slide-1", "collection-1", "main-image"
  url         String
  alt         String?
  title       String?
  description String?
  metadata    Json?    // Additional metadata like dimensions, order, etc.
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([section, imageKey])
  @@map("site_images")
}
